@inproceedings{compiler-level-ir,
author = {Anand, Kapil and Smithson, Matthew and Elwazeer, Khaled and Kotha, Aparna and Gruen, Jim and Giles, Nathan and Barua, Rajeev},
title = {A compiler-level intermediate representation based binary analysis and rewriting system},
year = {2013},
isbn = {9781450319942},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2465351.2465380},
doi = {10.1145/2465351.2465380},
abstract = {This paper presents component techniques essential for converting executables to a high-level intermediate representation (IR) of an existing compiler. The compiler IR is then employed for three distinct applications: binary rewriting using the compiler's binary back-end, vulnerability detection using source-level symbolic execution, and source-code recovery using the compiler's C backend. Our techniques enable complex high-level transformations not possible in existing binary systems, address a major challenge of input-derived memory addresses in symbolic execution and are the first to enable recovery of a fully functional source-code.We present techniques to segment the flat address space in an executable containing undifferentiated blocks of memory. We demonstrate the inadequacy of existing variable identification methods for their promotion to symbols and present our methods for symbol promotion. We also present methods to convert the physically addressed stack in an executable (with a stack pointer) to an abstract stack (without a stack pointer). Our methods do not use symbolic, relocation, or debug information since these are usually absent in deployed executables.We have integrated our techniques with a prototype x86 binary framework called SecondWrite that uses LLVM as IR. The robustness of the framework is demonstrated by handling executables totaling more than a million lines of source-code, produced by two different compilers (gcc and Microsoft Visual Studio compiler), three languages (C, C++, and Fortran), two operating systems (Windows and Linux) and a real world program (Apache server).},
booktitle = {Proceedings of the 8th ACM European Conference on Computer Systems},
pages = {295â€“308},
numpages = {14},
location = {Prague, Czech Republic},
series = {EuroSys '13}
}

@INPROCEEDINGS{snp-sok,
  author={Liu, Zhibo and Yuan, Yuanyuan and Wang, Shuai and Bao, Yuyan},
  booktitle={2022 IEEE Symposium on Security and Privacy (SP)}, 
  title={SoK: Demystifying Binary Lifters Through the Lens of Downstream Applications}, 
  year={2022},
  volume={},
  number={},
  pages={1100-1119},
  keywords={Industries;Privacy;Codes;Static analysis;Software;Security;Feeds;reverse-engineering;software-security},
  doi={10.1109/SP46214.2022.9833799}
}

@inproceedings{euro-binrec,
author = {Altinay, Anil and Nash, Joseph and Kroes, Taddeus and Rajasekaran, Prabhu and Zhou, Dixin and Dabrowski, Adrian and Gens, David and Na, Yeoul and Volckaert, Stijn and Giuffrida, Cristiano and Bos, Herbert and Franz, Michael},
title = {BinRec: dynamic binary lifting and recompilation},
year = {2020},
isbn = {9781450368827},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3342195.3387550},
doi = {10.1145/3342195.3387550},
abstract = {Binary lifting and recompilation allow a wide range of install-time program transformations, such as security hardening, deobfuscation, and reoptimization. Existing binary lifting tools are based on static disassembly and thus have to rely on heuristics to disassemble binaries.In this paper, we present BinRec, a new approach to heuristic-free binary recompilation which lifts dynamic traces of a binary to a compiler-level intermediate representation (IR) and lowers the IR back to a "recovered" binary. This enables BinRec to apply rich program transformations, such as compiler-based optimization passes, on top of the recovered representation. We identify and address a number of challenges in binary lifting, including unique challenges posed by our dynamic approach. In contrast to existing frameworks, our dynamic frontend can accurately disassemble and lift binaries without heuristics, and we can successfully recover obfuscated code and all SPEC INT 2006 benchmarks including C++ applications. We evaluate BinRec in three application domains: i) binary reoptimization, ii) deobfuscation (by recovering partial program semantics from virtualization-obfuscated code), and iii) binary hardening (by applying existing compiler-level passes such as AddressSanitizer and SafeStack on binary code).},
booktitle = {Proceedings of the Fifteenth European Conference on Computer Systems},
articleno = {36},
numpages = {16},
location = {Heraklion, Greece},
series = {EuroSys '20}
}

@Misc{TeXFAQ,
  title =        {{UK} List of {\TeX} Frequently Asked Questions},
  author =       {{UK \TeX{} Users Group}},
  year =         2019,
  howpublished = {\url{https://texfaq.org}}
}

@Manual{Downes04:amsart,
  title =        {The \textsf{amsart}, \textsf{amsproc}, and
                  \textsf{amsbook} document~classes},
  author =       {Michael Downes and Barbara Beeton},
  organization = {American Mathematical Society},
  year =         2004,
  month =        aug,
  note =         {\url{http://www.ctan.org/pkg/amslatex}}
}

@Manual{Fiorio15,
  title =        {{a}lgorithm2e.sty---package for algorithms},
  author =       {Cristophe Fiorio},
  year =         2015,
  month =        oct,
  note =         {\url{http://www.ctan.org/pkg/algorithm2e}}
}

@Manual{Brito09,
  title =        {The algorithms bundle},
  author =       {Rog\'erio Brito},
  year =         2009,
  month =        aug,
  note =         {\url{http://www.ctan.org/pkg/algorithms}}
}

@Manual{Heinz15,
  title =        {The Listings Package},
  author =       {Carsten Heinz and Brooks Moses and Jobst Hoffmann},
  year =         2015,
  month =        jun,
  note =         {\url{http://www.ctan.org/pkg/listings}}
}

@Manual{Fear05,
  title =        {Publication quality tables in {\LaTeX}},
  author =       {Simon Fear},
  year =         2005,
  month =        apr,
  note =         {\url{http://www.ctan.org/pkg/booktabs}}
}

@Manual{ACMIdentityStandards,
  title =        {{ACM} Visual Identity Standards},
  organization = {Association for Computing Machinery},
  year =         2007,
  note =         {\url{http://identitystandards.acm.org}}
}

@Manual{Sommerfeldt13:Subcaption,
  title =        {The subcaption package},
  author =       {Axel Sommerfeldt},
  year =         2013,
  month =        apr,
  note =         {\url{http://www.ctan.org/pkg/subcaption}}
}

@Manual{Nomencl,
  title =        {A package to create a nomenclature},
  author =       {Boris Veytsman and Bern Schandl and Lee Netherton
                  and C. V. Radhakrishnan},
  year =         2005,
  month =        sep,
  note =         {\url{http://www.ctan.org/pkg/nomencl}}
}

@Manual{Talbot16:Glossaries,
  title =        {User Manual for glossaries.sty v4.44},
  author =       {Nicola L. C. Talbot},
  year =         2019,
  month =        dec,
  note =         {\url{http://www.ctan.org/pkg/glossaries}}
}

@Manual{Carlisle04:Textcase,
  title =        {The \textsl{textcase} package},
  author =       {David Carlisle},
  month =        oct,
  year =         2004,
  note =         {\url{http://www.ctan.org/pkg/textcase}}
}

@Manual{Braams22:Babel,
  title = 	 {Babel},
  author = 	 {Johannes L. Braams and Javier Bezos},
  year = 	 2022,
  note = 	 {\url{http://www.ctan.org/pkg/babel}}}

